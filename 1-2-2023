Diameter of Binary tree

class Solution {
    int s=0;
    public int diameterOfBinaryTree(TreeNode root) {
        diameter(root);
        return s;
        
    }
    public int diameter(TreeNode t){
        if(t==null)
            return 0;
        int a=diameter(t.left);
        int b=diameter(t.right);
        s=Math.max(a+b,s);
        return Math.max(a,b)+1;
    }
}


Construct BST from preorder and inorder 

class Solution {
    int ps=0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        TreeNode r=build(preorder,inorder,0,inorder.length-1,hm);
        return r; 
    }
    public TreeNode build(int[] pre,int[] in,int is,int ie,HashMap<Integer,Integer> hm){
        if(is>ie || ps>pre.length)
            return null;
        TreeNode t=new TreeNode(pre[ps++]);
        int start=hm.get(t.val);
        int inleft=start-is;
        t.left=build(pre,in,is,start-1,hm);
        t.right=build(pre,in,start+1,ie,hm);
        return t;


    }
}

Construct BST from preorder traversal

class Solution {
    int i=0;
    public TreeNode bstFromPreorder(int[] preorder) {
        int upper=Integer.MAX_VALUE;
        TreeNode x=bst(preorder,upper);
        return x;
    }
    public TreeNode bst(int[] pre,int upper){
        if(i>pre.length-1)
            return null;
        if(pre[i]>upper)
            return null;
        TreeNode root=new TreeNode(pre[i++]);
        root.left=bst(pre,root.val);
        root.right=bst(pre,upper);
        return root;
    }
}


